# Generated by Django 5.0.4 on 2024-05-26 13:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('django_celery_beat', '0018_improve_crontab_helptext'),
    ]

    operations = [
        migrations.CreateModel(
            name='BinanceSymbol',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('symbol', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('data', models.JSONField(default=dict, help_text='Instrument data')),
            ],
            options={
                'verbose_name': 'Binance Symbol',
                'verbose_name_plural': 'Binance Symbols',
            },
        ),
        migrations.CreateModel(
            name='OkxSymbol',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('symbol', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('data', models.JSONField(default=dict, help_text='Instrument data')),
            ],
            options={
                'verbose_name': 'OKX Symbol',
                'verbose_name_plural': 'OKX Symbols',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('position_data', models.JSONField(default=dict, verbose_name='Position data')),
                ('sl_tp_data', models.JSONField(default=dict, verbose_name='SL/TP data')),
                ('ask_bid_data', models.JSONField(default=dict, verbose_name='Ask/Bid data')),
                ('is_open', models.BooleanField(default=True, verbose_name='Is open')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('name', models.CharField(help_text='Account name', max_length=255, unique=True, verbose_name='name')),
                ('exchange', models.CharField(choices=[('binance', 'Binance'), ('okx', 'OKX')], default='binance', help_text='Exchange', verbose_name='exchange')),
                ('api_key', models.CharField(help_text='API key', max_length=255, verbose_name='api_key')),
                ('api_secret', models.CharField(help_text='API secret', max_length=255, verbose_name='api_secret')),
                ('api_passphrase', models.CharField(blank=True, help_text='API passphrase', max_length=255, null=True, verbose_name='api_passphrase')),
                ('testnet', models.BooleanField(default=False, verbose_name='testnet')),
                ('created_by', models.ForeignKey(help_text='Created by', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='BinanceCandle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('time_frame', models.CharField(help_text='Interval', max_length=10, verbose_name='interval')),
                ('data', models.JSONField(default=list, help_text='Candles data')),
                ('symbol', models.ForeignKey(help_text='Binance Symbol', on_delete=django.db.models.deletion.CASCADE, related_name='candles', to='binance_okx.binancesymbol')),
            ],
            options={
                'verbose_name': 'Binance Candle',
                'verbose_name_plural': 'Binance Candles',
            },
        ),
        migrations.CreateModel(
            name='OkxCandle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('time_frame', models.CharField(help_text='Interval', max_length=10, verbose_name='interval')),
                ('data', models.JSONField(default=list, help_text='Candles data')),
                ('symbol', models.ForeignKey(help_text='OKX Symbol', on_delete=django.db.models.deletion.CASCADE, related_name='candles', to='binance_okx.okxsymbol')),
            ],
            options={
                'verbose_name': 'OKX Candle',
                'verbose_name_plural': 'OKX Candles',
            },
        ),
        migrations.CreateModel(
            name='Execution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('data', models.JSONField(default=dict, verbose_name='Date')),
                ('bill_id', models.CharField(max_length=255, unique=True, verbose_name='Bill ID')),
                ('trade_id', models.CharField(max_length=255, verbose_name='Trade ID')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='executions', to='binance_okx.position')),
            ],
            options={
                'verbose_name': 'Execution',
                'verbose_name_plural': 'Executions',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('data', models.JSONField(default=dict, verbose_name='Date')),
                ('execution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='binance_okx.execution')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='binance_okx.position')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('name', models.CharField(help_text='Strategy name', max_length=255, verbose_name='name')),
                ('enabled', models.BooleanField(default=True, help_text='Is enabled', verbose_name='Enabled')),
                ('position_size', models.FloatField(default=0.0, help_text='Max position size, USDT', verbose_name='Position size')),
                ('taker_fee', models.FloatField(default=0.0, help_text='Taker fee, %, market order', verbose_name='Taker fee')),
                ('maker_fee', models.FloatField(default=0.0, help_text='Maker fee, %, limit order', verbose_name='Maker fee')),
                ('target_profit', models.FloatField(default=0.0, help_text='Target profit, %', verbose_name='Target profit')),
                ('stop_loss', models.FloatField(default=0.0, help_text='Stop loss, %', verbose_name='Stop loss')),
                ('close_position_type', models.CharField(choices=[('limit', 'Limit'), ('market', 'Market')], default='market', help_text='Close position type', verbose_name='Close position type')),
                ('time_to_close', models.IntegerField(default=0, help_text='Time to close, seconds', verbose_name='Time to close')),
                ('close_position_parts', models.BooleanField(default=False, verbose_name='Close position parts')),
                ('stop_loss_breakeven', models.BooleanField(default=False, help_text='Stop loss break even', verbose_name='Breakeven')),
                ('tp_first_price_percent', models.FloatField(blank=True, default=0.0, help_text='Take profit price for first part, %', verbose_name='Take profit price')),
                ('tp_first_part_percent', models.FloatField(blank=True, default=0.0, help_text='Take profit first part, %', verbose_name='First part')),
                ('tp_second_price_percent', models.FloatField(blank=True, default=0.0, help_text='Take profit price for second part, %', verbose_name='Take profit price')),
                ('tp_second_part_percent', models.FloatField(blank=True, default=0.0, help_text='Take profit second part, %', verbose_name='Second part')),
                ('time_to_funding', models.IntegerField(default=0, help_text='Time to funding, minutes', verbose_name='Time to funding')),
                ('only_profit', models.BooleanField(default=False, help_text='Trading only in the direction of funding', verbose_name='Only profit')),
                ('logging', models.BooleanField(default=False, help_text='Logging enabled', verbose_name='logging')),
                ('mode', models.CharField(choices=[('trade', 'Trade'), ('emulate', 'Emulate')], default='trade', help_text='Algorithm mode', verbose_name='Mode')),
                ('created_by', models.ForeignKey(help_text='Created by', on_delete=django.db.models.deletion.PROTECT, related_name='strategies', to=settings.AUTH_USER_MODEL)),
                ('first_account', models.ForeignKey(help_text='Binance account', on_delete=django.db.models.deletion.CASCADE, related_name='strategies_set', to='binance_okx.account')),
                ('second_account', models.ForeignKey(help_text='OKX account', on_delete=django.db.models.deletion.CASCADE, related_name='strategies', to='binance_okx.account')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='django_celery_beat.periodictask', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Strategy',
                'verbose_name_plural': 'Strategies',
            },
        ),
        migrations.CreateModel(
            name='StatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('logger_name', models.CharField(max_length=100)),
                ('level', models.PositiveSmallIntegerField(choices=[(0, 'NotSet'), (20, 'Info'), (30, 'Warning'), (10, 'Debug'), (40, 'Error'), (50, 'Fatal')], db_index=True, default=40)),
                ('msg', models.TextField()),
                ('trace', models.TextField(blank=True, null=True)),
                ('symbol', models.CharField(blank=True, max_length=20, null=True)),
                ('created_by', models.ForeignKey(help_text='Created by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to=settings.AUTH_USER_MODEL)),
                ('strategy', models.ForeignKey(help_text='Strategy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to='binance_okx.strategy')),
            ],
            options={
                'verbose_name': 'Logging',
                'verbose_name_plural': 'Logging',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='position',
            name='strategy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='positions', to='binance_okx.strategy'),
        ),
        migrations.CreateModel(
            name='Symbol',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('symbol', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('binance', models.ForeignKey(help_text='Binance Symbol', on_delete=django.db.models.deletion.CASCADE, related_name='binance', to='binance_okx.binancesymbol')),
                ('okx', models.ForeignKey(help_text='OKX Symbol', on_delete=django.db.models.deletion.CASCADE, related_name='okx', to='binance_okx.okxsymbol')),
            ],
            options={
                'verbose_name': 'Symbol',
                'verbose_name_plural': 'Symbols',
            },
        ),
        migrations.AddField(
            model_name='strategy',
            name='symbols',
            field=models.ManyToManyField(help_text='Symbols', related_name='strategies', to='binance_okx.symbol'),
        ),
        migrations.AddField(
            model_name='position',
            name='symbol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='positions', to='binance_okx.symbol'),
        ),
    ]
